#+TITLE: zwPapEr GNU Emacs Configuration

* About

When first using this config, there is some steps have to be done before started.

1. git submodule init
2. git submodule update

Sometimes when first start, emacs may not found some package in =Melpa=,
try to install any one package manually, and then restart emacs.

Because some packages need fully reload, It may need several restarting Emacs.


* Essentials

  There are some system package dependency, should be installed, check [[https://github.com/zwpaper/dotfile][dot file]]

** Use package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)

  (use-package use-package-ensure-system-package)
  (use-package quelpa-use-package)
  (use-package use-package-hydra)
#+end_src


** Startup Optimization

   Optimize startup time.

#+BEGIN_SRC emacs-lisp
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (setq gc-cons-threshold 80000000)
  (add-hook 'emacs-startup-hook
         (lambda ()
       "Restore defalut values after init."
       (setq file-name-handler-alist default-file-name-handler-alist)
       (setq gc-cons-threshold 800000)
       (if (boundp 'after-focus-change-function)
           (add-function :after after-focus-change-function
                 (lambda ()
                   (unless (frame-focus-state)
                     (garbage-collect))))
         (add-hook 'focus-out-hook 'garbage-collect))))

  ;; Start up dashboard
  (use-package dashboard
    :ensure t
    :diminish dashboard-mode
    :config
    (setq dashboard-banner-logo-title "Welcome to Black Magic")
    (setq dashboard-startup-banner "~/.emacs.d/config/ironman.png")
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 10)))
    (dashboard-setup-startup-hook))
#+END_SRC

** Package

   Download some packages from Internet

#+begin_src emacs-lisp
  (setq manual-pakages
        '(
          "https://raw.githubusercontent.com/manateelazycat/awesome-pair/master/awesome-pair.el"
          "https://raw.githubusercontent.com/manateelazycat/thing-edit/master/thing-edit.el"
          "https://raw.githubusercontent.com/joaotavora/autopair/master/autopair.el"
          "https://raw.githubusercontent.com/zk-phi/indent-guide/master/indent-guide.el"
          "https://raw.githubusercontent.com/beancount/beancount/master/editors/emacs/beancount.el"))

;  (while manual-pakages
;    (url-copy-file (car manual-pakages)
;                   (concat "~/.emacs.d/plugin/" (car (last (split-string (car manual-pakages) "/"))))
;                   t)
;    (setq manual-pakages (cdr manual-pakages)))

  ;;; Vars
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (add-to-list 'exec-path "/usr/local/bin")
  (add-to-list 'load-path "~/.emacs.d/plugin")
  (add-to-list 'load-path "~/.emacs.d/config")
  (setq ispell-program-name "aspell"
        ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
        ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--camel-case"))
#+end_src


*** General

#+begin_src emacs-lisp
  (setq confirm-kill-emacs
      (lambda (prompt) (y-or-n-p-with-timeout "Whether to quit Emacs:" 10 "y")))
  (when (eq system-type 'darwin)
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-env "PATH")))

  (defun draft-buffer()
    (interactive)
    (find-file (expand-file-name "~/OneDrive/org-mode/personal.draft.org"))
    (goto-char (point-max)))

  (defun draft-work-buffer()
    (interactive)
    (find-file (expand-file-name "~/OneDrive/org-mode/work/draft.org"))
    (goto-char (point-max)))
#+end_src

**** Thing Edit
#+begin_src emacs-lisp
  ;; unbind C-w and M-w first, for binding in thing edit
  (global-unset-key (kbd "C-w"))
  (global-unset-key (kbd "M-w"))
  (use-package thing-edit
    :load-path "plugin/thing-edit"
    :ensure nil
    :bind
    (("C-w C-w" . thing-cut-word)
     ("M-w M-w" . thing-copy-word)
     ("C-w C-r" . thing-cut-region-or-line)
     ("M-w M-r" . thing-copy-region-or-line)
     ("C-w C-s" . thing-cut-sexp)
     ("M-w M-s" . thing-copy-sexp)
     ("C-w C-f" . thing-cut-filename)
     ("M-w M-f" . thing-copy-filename)
     ("C-w C-u" . thing-cut-url)
     ("M-w M-u" . thing-copy-url)
     ("C-w C-p" . thing-cut-parentheses)
     ("M-w M-p" . thing-copy-parentheses)
     ("C-w C-c" . thing-cut-comment)
     ("M-w M-c" . thing-copy-comment)
     ("C-w C-b" . thing-cut-whole-buffer)
     ("M-w M-b" . thing-copy-whole-buffer)))

  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (use-package grammatical-edit
    :load-path "plugin/grammatical-edit"
    :ensure nil
    :config
    (dolist (hook (list
                   'c-mode-common-hook
                   'c-mode-hook
                   'c++-mode-hook
                   'java-mode-hook
                   'haskell-mode-hook
                   'emacs-lisp-mode-hook
                   'lisp-interaction-mode-hook
                   'lisp-mode-hook
                   'maxima-mode-hook
                   'ielm-mode-hook
                   'sh-mode-hook
                   'makefile-gmake-mode-hook
                   'php-mode-hook
                   'python-mode-hook
                   'js-mode-hook
                   'go-mode-hook
                   'qml-mode-hook
                   'jade-mode-hook
                   'css-mode-hook
                   'ruby-mode-hook
                   'coffee-mode-hook
                   'rust-mode-hook
                   'qmake-mode-hook
                   'lua-mode-hook
                   'swift-mode-hook
                   'minibuffer-inactive-mode-hook
                   'typescript-mode-hook
                   ))
      (add-hook hook '(lambda () (grammatical-edit-mode 1))))
    (define-key grammatical-edit-mode-map (kbd "(") 'grammatical-edit-open-round)
    (define-key grammatical-edit-mode-map (kbd "[") 'grammatical-edit-open-bracket)
    (define-key grammatical-edit-mode-map (kbd "{") 'grammatical-edit-open-curly)
    (define-key grammatical-edit-mode-map (kbd ")") 'grammatical-edit-close-round)
    (define-key grammatical-edit-mode-map (kbd "]") 'grammatical-edit-close-bracket)
    (define-key grammatical-edit-mode-map (kbd "}") 'grammatical-edit-close-curly)
    (define-key grammatical-edit-mode-map (kbd "=") 'grammatical-edit-equal)

    (define-key grammatical-edit-mode-map (kbd "%") 'grammatical-edit-match-paren)
    (define-key grammatical-edit-mode-map (kbd "\"") 'grammatical-edit-double-quote)
    (define-key grammatical-edit-mode-map (kbd "'") 'grammatical-edit-single-quote)

    (define-key grammatical-edit-mode-map (kbd "SPC") 'grammatical-edit-space)
    (define-key grammatical-edit-mode-map (kbd "RET") 'grammatical-edit-newline)

    (define-key grammatical-edit-mode-map (kbd "M-o") 'grammatical-edit-backward-delete)
    (define-key grammatical-edit-mode-map (kbd "C-d") 'grammatical-edit-forward-delete)
    (define-key grammatical-edit-mode-map (kbd "C-k") 'grammatical-edit-kill)

    (define-key grammatical-edit-mode-map (kbd "M-\"") 'grammatical-edit-wrap-double-quote)
    (define-key grammatical-edit-mode-map (kbd "M-'") 'grammatical-edit-wrap-single-quote)
    (define-key grammatical-edit-mode-map (kbd "M-[") 'grammatical-edit-wrap-bracket)
    (define-key grammatical-edit-mode-map (kbd "M-{") 'grammatical-edit-wrap-curly)
    (define-key grammatical-edit-mode-map (kbd "M-(") 'grammatical-edit-wrap-round)
    (define-key grammatical-edit-mode-map (kbd "M-)") 'grammatical-edit-unwrap)

    (define-key grammatical-edit-mode-map (kbd "M-p") 'grammatical-edit-jump-right)
    (define-key grammatical-edit-mode-map (kbd "M-n") 'grammatical-edit-jump-left)
    (define-key grammatical-edit-mode-map (kbd "M-:") 'grammatical-edit-jump-out-pair-and-newline))
#+end_src

**** White spaces
#+begin_src emacs-lisp
  (defun moon-hungry-delete ()
    "Smart and clean delete.
  If we are at the beginning of a line, backspace
  deletes all whitespace before and after point
  and moves point to the previous line."
    (interactive)
    (if (or (region-active-p)
            (<= (car (syntax-ppss)) 0))
        (if (member (char-before) '(?{ ?\[ ?\())
            (call-interactively #'electric-pair-delete-pair)
          (call-interactively #'backward-delete-char-untabify))
      ;; case1: closing delimiter after point:
      ;;        delete all excess white space and new line
      ;;        before and after point
      ;;        add newline and indent if is }
      ;; case2: other stuff after point:
      ;;        remove empty lines and indent
      (let* ((point (point))
             (bolt (save-excursion
                     ;; `beginning-of-line-text' seems to ignore comment for some reason,
                     (beginning-of-line)
                     (skip-chars-forward " \t")
                     (point)))
             ;; beginning of the region that we are to delete
             (beg (save-excursion (while (member (char-before) '(?\n ?\s ?\t))
                                    (backward-char))
                                  (point)))
             ;; end of that region
             (end (save-excursion (goto-char bolt)
                                  (while (member (char-after) '(?\n ?\s ?\t))
                                    (forward-char))
                                  (point))))
        (if (<= point bolt)
            ;; actually decide to delete stuff
            (progn
              (delete-region beg end)
              (unless (eql (char-after) ?\))
                (call-interactively #'newline))
              ;; so we did all this and ends up not changing anything
              ;; why? because the user doesn't want to delete excess white space,
              ;; but to delete back to previous line! do that.
              (when (eql (point) end)
                (delete-region beg end)
                (insert ?\s)))
          ;; not at beginning of text, just do normal delete
          (if (member (char-before) '(?{ ?\[ ?\())
              (call-interactively #'electric-pair-delete-pair)
            (call-interactively #'backward-delete-char-untabify))))))

  (global-set-key (kbd "<C-backspace>") (lambda ()
                                          (interactive)
                                          (moon-hungry-delete)))

  ;; Visualize TAB, (HARD) SPACE, NEWLINE
  (use-package whitespace
    :ensure nil
    :diminish
    :hook
    ((prog-mode outline-mode conf-mode) . whitespace-mode)
    (markdown-mode . whitespace-mode)
    (yaml-mode . whitespace-mode)
    :config
    (setq whitespace-line-column fill-column) ;; limit line length
    ;; automatically clean up bad whitespace
    (setq whitespace-action '(auto-cleanup))
    ;; only show bad whitespace
    (setq whitespace-style '(face
                             trailing space-before-tab
                             empty space-after-tab))

    (with-eval-after-load 'popup
      ;; advice for whitespace-mode conflict with popup
      (defvar my-prev-whitespace-mode nil)
      (make-local-variable 'my-prev-whitespace-mode)

      (defadvice popup-draw (before my-turn-off-whitespace activate compile)
        "Turn off whitespace mode before showing autocomplete box."
        (if whitespace-mode
            (progn
              (setq my-prev-whitespace-mode t)
              (whitespace-mode -1))
          (setq my-prev-whitespace-mode nil)))

      (defadvice popup-delete (after my-restore-whitespace activate compile)
        "Restore previous whitespace mode when deleting autocomplete box."
        (if my-prev-whitespace-mode
            (whitespace-mode 1)))))

  (use-package aggressive-indent
  :config
  (global-aggressive-indent-mode))

  (use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))

  (use-package highlight-parentheses
  :hook
  (prog-mode . highlight-parentheses-mode))

  (use-package pangu-spacing
    :config
    (setq pangu-spacing-real-insert-separtor t)
    :hook
    (org-mode . pangu-spacing-mode)
    (markdown-mode . pangu-spacing-mode)
    (gfm-mode . pangu-spacing-mode))

#+end_src

**** Style

     Check spell for org and markdown

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :defer t
    :init
    (progn
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
      (add-hook 'text-mode-hook 'flyspell-mode)))
#+END_SRC

**** Terminal

#+begin_src emacs-lisp
  (use-package init-term
    :ensure nil)
#+end_src

** OS Related
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
  (add-hook 'before-save-hook 'whitespace-cleanup)
  (setq ad-redefinition-action 'accept)

  ;; Use UTF-8 as much as possible with unix line endings
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

  ;; Always have a new line at the end of a file
  (setq require-final-newline t)

  ;; When buffer is closed, saves the cursor location
  (save-place-mode 1)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Garbage collect when Emacs is not in focus
  (add-hook 'focus-out-hook #'garbage-collect)

  ;; Merge system clipboard with Emacs
  (setq-default select-enable-clipboard t)

  ;; Prevent Extraneous Tabs
  (setq-default indent-tabs-mode nil)

  ;; Use iBuffer instead of Buffer List
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; Truncate lines
  (global-set-key (kbd "C-x C-!") 'toggle-truncate-lines)
#+end_src

*** macOS
#+begin_src emacs-lisp
  (when (display-graphic-p)
    (menu-bar-mode     -1)
    (toggle-scroll-bar -1)
    (tool-bar-mode     -1)
    (tooltip-mode      -1)
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark)) ;; assuming you are using a dark theme
    (setq ns-use-proxy-icon nil)
    (setq frame-title-format nil))
#+end_src

-----

** Hydra
#+begin_src emacs-lisp
  (use-package init-hydra
    :load-path "config"
    :ensure nil)
#+end_src


** Funny Skins
#+begin_src emacs-lisp
  (use-package emojify
    :config
    (add-hook 'org-mode-hook #'emojify-mode))
  (use-package doom-modeline
    :config
    :hook
    (after-init . doom-modeline-init))
  (use-package nyan-mode
    :hook
    (after-init . nyan-mode))
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (defcustom centaur-icon (display-graphic-p)
    "Display icons or not."
    :group 'centaur
    :type 'boolean)
  (defun icons-displayable-p ()
    "Return non-nil if `all-the-icons' is displayable."
    (and centaur-icon
         (display-graphic-p)
         (require 'all-the-icons nil t)))
#+end_src

*** Nerd Icons
    install [[https://github.com/ryanoasis/nerd-fonts][Nerd Icons]] before using this

    macOS:
#+begin_quote
   brew cask install font-hack-nerd-font
#+end_quote

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure nil
    :load-path "~/code/elisp/all-the-icons.el")
    ;; (all-the-icons-install-fonts))
  (use-package nerd-icons
    :load-path "~/.emacs.d/plugin/nerd-icons"
    :ensure nil)
  (set-face-attribute 'default nil
                      :family "Hack Nerd Font"
                      :height 140
                      :weight 'normal
                      :width 'normal)
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :init (ivy-rich-mode 1)
    :config
    (setq all-the-icons-ivy-rich-icon-size 0.8))

  (use-package all-the-icons-ibuffer
    :ensure t
    :init (all-the-icons-ibuffer-mode 1))

  (use-package ibuffer-projectile
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-projectile-set-filter-groups)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))

  ;; dired auto use the other window path as target
  (setq dired-dwim-target t)

  (cond ((eq system-type 'windows-nt)
         ;; Windows-specific code goes here.
         )
        ((eq system-type 'gnu/linux)
         ;; Linux-specific code goes here.
         )
        ((eq system-type 'darwin)
         ;; macOS code goes here.
         ))

  (if (eq system-type 'darwin)
      (progn
        ;; Set default font
        ;;; 如果配置好，这24个汉字与下面个48英文字母应该等长
        ;;; here are 24 chinese and 48 english chars, ended.
        (set-face-attribute 'default nil
                            :family "Hack Nerd Font"
                            :height 140
                            :weight 'normal
                            :width 'normal)
        (set-fontset-font t 'han      (font-spec
                                       :family "PingFang SC"
                                       :size 16
                                       ))
        (set-fontset-font t 'cjk-misc (font-spec
                                       :family "PingFang SC"
                                       :size 16
                                       ))))

  ;; (setq face-font-rescale-alist '(("PingFang SC" . 1.0)))
#+end_src

*** Show color in buffers
    + compilation

#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point)))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src

*** Show line numbers
#+begin_src emacs-lisp
  (add-hook 'find-file-hooks (lambda()(display-line-numbers-mode 1)))
#+end_src

** Kill ring
#+begin_src emacs-lisp
  (setenv "LANG" "en_US.UTF-8")
  (defun isolate-kill-ring()
    "Isolate Emacs kill ring from OS X system pasteboard.
  This function is only necessary in window system."
    (interactive)
    (setq interprogram-cut-function nil)
    (setq interprogram-paste-function nil))

  (defun pasteboard-copy()
    "Copy region to OS X system pasteboard."
    (interactive)
    (shell-command-on-region
     (region-beginning) (region-end) "pbcopy"))

  (defun pasteboard-paste()
    "Paste from OS X system pasteboard via `pbpaste' to point."
    (interactive)
    (shell-command-on-region
     (point) (if mark-active (mark) (point)) "pbpaste" nil t))

  (defun pasteboard-cut()
    "Cut region and put on OS X system pasteboard."
    (interactive)
    (pasteboard-copy)
    (delete-region (region-beginning) (region-end)))

  (if window-system
      (progn
        (isolate-kill-ring)
        ;; bind CMD+C to pasteboard-copy
        (global-set-key (kbd "s-c") 'pasteboard-copy)
        ;; bind CMD+V to pasteboard-paste
        (global-set-key (kbd "s-v") 'pasteboard-paste)
        ;; bind CMD+X to pasteboard-cut
        (global-set-key (kbd "s-x") 'pasteboard-cut))
    )
#+end_src



** Customize
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
** TBD

#+begin_src emacs-lisp
            ;;; var
                                          ;(defvar program-mode (haskell-mode c-mode emacs-lisp-mode lisp-interaction-mode lisp-mode
                                          ;                sh-mode c++-mode makefile-gmake-mode python-mode js-mode
                                          ;                go-mode rust-mode lua-mode minibuffer-inactive-mode))

      ;;; local package
  (use-package init-org
    :ensure nil)
  (use-package init-pyim
    :ensure nil)
  (use-package init-languages
    :ensure nil)
  (use-package init-tabnine
    :ensure nil)
  (use-package init-beancount
    :ensure nil)
  (use-package init-window
    :ensure nil)
  ;(use-package init-dired
  ;  :ensure nil)

  (use-package multiple-cursors)


  ;;; Treemacs
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (treemacs-resize-icons 22)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

      ;;; Bookmarks
  (setq bookmark-save-flag 1) ; everytime bookmark is changed, automatically save it
  (use-package recentf
    :init
    (recentf-mode 1)
    :config
    (setq-default recent-save-file "~/.emacs.d/recentf")
    (setq recentf-max-menu-items 100))

  (use-package epa-file
    :ensure nil
    :config
    (epa-file-enable)
    (setq epa-pinentry-mode 'loopback)
    )

  ;; Global Settings:
    ;;; Key bindings
  ;; scroll one line only when past the bottom of screen
  (setq scroll-conservatively 1)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        '(("home"
           ("emacs-config" (or (filename . ".emacs.d")
                               (filename . "emacs-config")))
           ("eshells" (or (name . "\.esh")
                          (name . "*eshell*")))
           ("Org" (or (mode . org-mode)
                      (filename . "OrgMode")))
           ("Golang Dev" (or (mode . go-mode)))
           ("Magit" (name . "\*magit"))
           ("Help" (or (name . "\*Help\*")
                       (name . "\*Apropos\*")
                       (name . "\*info\*"))))))
  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-switch-to-saved-filter-groups "home")))
  (setq ibuffer-expert t)
  (setq ibuffer-show-empty-filter-groups nil)

  ;; (require 'tramp)
  ;; (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

  ;; multiple cursors
  (global-set-key (kbd "C-c C-l") 'mc/edit-lines)
  (global-set-key (kbd "C-c C-n") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c C-p") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-a") 'mc/mark-all-like-this)

  ;; Move backup file to tmp folder
  (setq  backup-directory-alist `((".*" . ,temporary-file-directory))
         auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
         backup-by-copying t
         delete-old-versions t
         kept-new-versions 6
         kept-old-versions 2
         version-control t)

  ;; Ace-window
  (global-set-key (kbd "C-M-o") 'ace-window)     ; Ace-window
  (setq aw-keys '(?a ?s ?d ?f ?q ?w ?e ?r))
  ;; avy
  (use-package avy
    :bind
    (("C-M-[" . avy-goto-char-2)))

    ;;; Global

  (setq inhibit-compacting-font-caches t)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))

  (use-package ivy
    :diminish ivy-mode
    :config
    (setq ivy-use-selectable-prompt t)
    (use-package ivy-rich)
    (use-package swiper)
    (use-package counsel
      :bind
      ("M-y" . counsel-yank-pop)
      ("M-x" . counsel-M-x)
      ("C-c g" . counsel-git)
      ("C-c j" . counsel-git-grep)
      ("C-c k" . counsel-rg)
      ("C-x C-f" . counsel-find-file)
      ("C-x r m" . counsel-bookmark))
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    :bind
    (("C-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("M-y" . counsel-yank-pop)
     ("M-x" . counsel-M-x)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c k" . counsel-rg)
     ("C-x C-f" . counsel-find-file)

     :map minibuffer-local-map
     ("C-r" . counsel-minibuffer-history)))

  ;; magit
  (use-package magit
    :config
    (use-package magit-delta
      :config
      (setq magit-delta-default-dark-theme "OneHalfDark")
      (setq magit-delta-delta-args
            `("--max-line-distance" "0.6"
              "--24-bit-color" ,(if xterm-color--support-truecolor "always" "never")
              "--color-only" "--minus-style" "normal red" "--plus-style" "normal green")))
    ;; :config
    ;; (use-package magit-todos
    ;;   :config
    ;;   (magit-todos-mode 1)
    ;;   (setq magit-todos-exclude-globs "vendor"))
    :bind
    ("C-x g" . magit-status))


  ;; Indent Guide
  (use-package indent-guide
    :config
    (set-face-foreground 'indent-guide-face "dimgray")
    (setq indent-guide-delay 0.2)
    :hook
    (prog-mode . indent-guide-mode)
    (yaml-mode . indent-guide-mode))

  (load "server")
  (unless (server-running-p) (server-start))

  ;;(use-package yequake)
  ;;  :custom
  ;;  (yequake-frames
  ;;   '(("org-capture"
  ;;      (buffer-fns . (yequake-org-capture))
  ;;      (width . 0.75)
  ;;      (height . 0.5)
  ;;      (alpha . 0.95)
  ;;      (frame-parameters . ((undecorated . t)
  ;;                           (skip-taskbar . t)
  ;;                           (sticky . t))))))

                                          ; (setq org-latex-compiler "xelatex")
                                          ; (setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
                                          ; (setq-default TeX-engine 'xetex)
                                          ; (setq-default TeX-PDF-mode t)
#+end_src

* Credits
This Emacs configuration was influenced and inspired by the following configurations.
- [[https://github.com/MatthewZMD/.emacs.d][MT’s GNU Emacs Configuration]]
